require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe QuotesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Quote. As you add validations to Quote, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {body: "quote", description: "description" }
  }

  let(:invalid_attributes) {
    {body: "", description: "description" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # QuotesController. Be sure to keep this updated too.
  let(:valid_session) { { user: { username: 'admin', role: 'admin' } } }

  describe "GET index" do
    it "assigns all quotes as @quotes" do
      quote = Quote.create! valid_attributes
      quote.approved = true
      quote.save
      get :index, {format: :json}, valid_session
      expect(assigns(:quotes)).to eq([quote])
    end
  end

  describe "GET show" do
    it "assigns the requested quote as @quote" do
      quote = Quote.create! valid_attributes
      get :show, {id: quote.to_param, format: :json}, valid_session
      expect(assigns(:quote)).to eq(quote)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Quote" do
        expect {
          post :create, {quote: valid_attributes, format: :json}, valid_session
        }.to change(Quote, :count).by(1)
      end

      it "assigns a newly created quote as @quote" do
        post :create, {quote: valid_attributes, format: :json}, valid_session
        expect(assigns(:quote)).to be_a(Quote)
        expect(assigns(:quote)).to be_persisted
      end

      it "have the proper status code" do
        post :create, {quote: valid_attributes, format: :json}, valid_session
        expect(response).to have_http_status(:created)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved quote as @quote" do
        post :create, {quote: invalid_attributes, format: :json}, valid_session
        expect(assigns(:quote)).to be_a_new(Quote)
      end

      it "have the proper status code" do
        post :create, {quote: invalid_attributes, format: :json}, valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {body: "new quote", description: "new description" }
      }

      it "updates the requested quote" do
        quote = Quote.create! valid_attributes
        put :update, {id: quote.to_param, quote: new_attributes, format: :json}, valid_session
        quote.reload
        expect(quote.body).to eql("new quote")
        expect(quote.description).to eql("new description")
      end

      it "assigns the requested quote as @quote" do
        quote = Quote.create! valid_attributes
        put :update, {id: quote.to_param, quote: valid_attributes, format: :json}, valid_session
        expect(assigns(:quote)).to eq(quote)
      end

      it "has the proper status code" do
        quote = Quote.create! valid_attributes
        put :update, {id: quote.to_param, quote: valid_attributes, format: :json}, valid_session
        expect(response).to have_http_status(:ok)
      end
    end

    describe "with invalid params" do
      it "assigns the quote as @quote" do
        quote = Quote.create! valid_attributes
        put :update, {id: quote.to_param, quote: invalid_attributes, format: :json}, valid_session
        expect(assigns(:quote)).to eq(quote)
      end

      it "has the correct status code" do
        quote = Quote.create! valid_attributes
        put :update, {id: quote.to_param, quote: invalid_attributes, format: :json}, valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested quote" do
      quote = Quote.create! valid_attributes
      expect {
        delete :destroy, {id: quote.to_param, format: :json}, valid_session
      }.to change(Quote, :count).by(-1)
    end

    it "has the propper status code" do
      quote = Quote.create! valid_attributes
      delete :destroy, {id: quote.to_param, format: :json}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

  describe "PUT approve" do
    it "approves the requested quote" do
      quote = Quote.create! valid_attributes
      expect(quote.approved).to be_nil
      put :approve, {id: quote.to_param, format: :json}, valid_session
      quote.reload
      expect(quote.approved).to eql(true)
    end

    it "assigns the requested quote as @quote" do
      quote = Quote.create! valid_attributes
      put :approve, {id: quote.to_param, format: :json}, valid_session
      expect(assigns(:quote)).to eq(quote)
    end

    it "has the correct status code" do
      quote = Quote.create! valid_attributes
      put :approve, {id: quote.to_param, format: :json}, valid_session
      expect(response).to have_http_status(:ok)
    end
  end

  describe "PUT deny" do
    it "denies the requested quote" do
      quote = Quote.create! valid_attributes
      expect(quote.approved).to be_nil
      put :deny, {id: quote.to_param, format: :json}, valid_session
      quote.reload
      expect(quote.approved).to eql(false)
    end

    it "assigns the requested quote as @quote" do
      quote = Quote.create! valid_attributes
      put :deny, {id: quote.to_param, format: :json}, valid_session
      expect(assigns(:quote)).to eq(quote)
    end

    it "has the correct status code" do
      quote = Quote.create! valid_attributes
      put :deny, {id: quote.to_param, format: :json}, valid_session
      expect(response).to have_http_status(:ok)
    end
  end
end
